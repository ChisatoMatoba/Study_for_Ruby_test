<body data-category-id="<%= @question.category.id %>" data-question-id="<%= @question.id %>" data-next-question-url="<%= next_category_question_path(@question.category, @question) %>">
  <div class="container">
    <div class="content">
      <h3>問題 <%= @question.number %> :</h3>

      <%= markdown(@question.content) %>
      <div class="card mb-3">
        <ul id="choices" class="list-group list-group-flush">
          <% @choices.each_with_index do |choice, i| %>
            <li class="choice list-group-item" data-choice-id="<%= choice.id %>"><%= i + 1 %> : <%= markdown(choice.content) %></li>
          <% end %>
        </ul>
      </div>
      <% unless @show_solution %>
        <div class="card border-light mb-3">
          <h5><div id="selected_choices" class="text-center"></div></h5>
          <button id="submit_answers" class="btn btn-outline-success">回答</button>
        </div>
      <% end %>
    </div>

    <% if @show_solution %>
      <div class="card bg-warning bg-opacity-10 mb-3">
        <ul>
          <li class="mt-3">正しい選択肢:</li>
          <% @question.choices.where(is_correct: true).each do |choice| %>
            <li><%= markdown(choice.content) %></li>
          <% end %>
        </ul>
      </div>
      <div class="card bg-info bg-opacity-10 mb-3">
        <ul>
          <li class="mt-3">解説:</li>
          <li><%= @question.explanation %></li>
        </ul>
      </div>
      <%= link_to '←結果ページに戻る', results_category_path(@question.category), class: "btn  btn-outline-warning" %>
    <% else %>
      <div id="result_card" class="content" style="display:none;">
        <div id="result_display" class=""></div>
        <div id="correct_answers" class="card bg-warning bg-opacity-10 mb-3"></div>
        <div id="explanation" class="card bg-info bg-opacity-10 mb-3"></div>
        <button id="next_button" class="btn btn-primary">次へ</button>
      </div>
    <% end %>
  </div>
</body>

<script>
  document.addEventListener('turbo:load', function () {
    const choices = document.querySelectorAll('.choice');
    const selectedChoices = document.getElementById('selected_choices');
    const submitButton = document.getElementById('submit_answers');
    const resultCard = document.getElementById('result_card');
    const resultDisplay = document.getElementById('result_display');
    const nextButton = document.getElementById('next_button');

    choices.forEach(choice => {
      choice.addEventListener('click', function () {
        this.classList.toggle('selected');
        updateSelectedChoices();
      });
    });

    function updateSelectedChoices() {
      const selected = document.querySelectorAll('.choice.selected');
      selectedChoices.innerHTML = '選択: ' + Array.from(selected).map(el => el.textContent.split(':')[0].trim()).join(', ');
    }

    submitButton.addEventListener('click', function() {
      const selected = document.querySelectorAll('.choice.selected');
      const selectedIds = Array.from(selected).map(el => el.getAttribute('data-choice-id'));
      // サーバーに選択肢のIDを送信して正解判定を受け取る
      fetch(`/categories/${document.querySelector('body').dataset.categoryId}/questions/${document.querySelector('body').dataset.questionId}/check_answer`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("[name='csrf-token']").content
        },
        body: JSON.stringify({
          question_id: document.querySelector('body').dataset.questionId,
          choice_ids: selectedIds
        })
      })
      .then(response => response.json())
      .then(data => {
        resultDisplay.textContent = data.is_correct ? '正解！' : '不正解';
        // レスポンスから取得したMarkdown形式のテキストをHTMLに変換して表示
        const markdownContent = '\n' + data.correct_choices.map(choice => `- ${choice}`).join('\n');
        document.getElementById('correct_answers').innerHTML = marked.parse('正しい選択肢: ' + markdownContent);

        document.getElementById('explanation').innerHTML = '解説: <br>' + data.explanation;
        submitButton.disabled = true;
        resultCard.style.display = 'block';
      })
    });

    nextButton.addEventListener('click', function() {
      const nextQuestionUrl = document.querySelector('body').dataset.nextQuestionUrl;
      window.location.href = nextQuestionUrl;
    });
  });
</script>
